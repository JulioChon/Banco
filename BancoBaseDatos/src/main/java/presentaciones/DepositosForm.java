/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentaciones;

import dominio.Cuenta;
import excepciones.PersistenciaException;
import implementaciones.ClientesDAO;
import interfaces.IClientesDAO;
import interfaces.ICuentasDAO;
import interfaces.IDepositosDAO;
import interfaces.IDireccionesDAO;
import interfaces.IMoviminetosDAO;
import interfaces.IRetirosSinCuentaDAO;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Frame de depósitos
 * @author esteb
 */
public class DepositosForm extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(ClientesDAO.class.getName());//Logger para errores
    private final IClientesDAO clientesDAO;//Interfaz de clientes
    private final IDireccionesDAO direccionesDAO;//Interfaz de direcciones
    private final ICuentasDAO cuentasDAO;//Interfaz de cuentas
    private final IRetirosSinCuentaDAO retirosDAO;//Interfaz de retiros
    private Integer numCuenta;//Número a depositar
    private float monto;//Monto a depositar
    private final IDepositosDAO depositosDAO;//Interfaz de depósitos
    private final IMoviminetosDAO movimientosDAO;//Interfaz de movimientos

    /**
     * Constructor del formulario para depósitos, solo carga las interfaces.
     *
     * @param clientesDAO Interfaz de clientes
     * @param direccionesDAO Interfaz de direcciones
     * @param cuentasDAO Interfaz de cuentas
     * @param retirosDAO Interfaz de retiros
     * @param depositosDAO Interfaz de depósitos
     * @param movimientosDAO Interfaz de movimientos
     */
    public DepositosForm(IClientesDAO clientesDAO, IDireccionesDAO direccionesDAO, ICuentasDAO cuentasDAO, IRetirosSinCuentaDAO retirosDAO, IDepositosDAO depositosDAO, IMoviminetosDAO movimientosDAO) {
        this.clientesDAO = clientesDAO;
        this.direccionesDAO = direccionesDAO;
        this.cuentasDAO = cuentasDAO;
        this.retirosDAO = retirosDAO;
        this.depositosDAO = depositosDAO;
        this.movimientosDAO = movimientosDAO;;
        initComponents();
        this.setTitle("Depósitos");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCuenta = new javax.swing.JLabel();
        txtCuenta = new javax.swing.JTextField();
        lblMonto = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(192, 212, 193));

        lblCuenta.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblCuenta.setForeground(new java.awt.Color(55, 81, 55));
        lblCuenta.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCuenta.setText("Cuenta Destino");

        txtCuenta.setBackground(new java.awt.Color(192, 212, 193));
        txtCuenta.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtCuenta.setBorder(null);
        txtCuenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCuentaKeyTyped(evt);
            }
        });

        lblMonto.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMonto.setForeground(new java.awt.Color(55, 81, 55));
        lblMonto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonto.setText("Monto");

        txtMonto.setBackground(new java.awt.Color(192, 212, 193));
        txtMonto.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtMonto.setBorder(null);
        txtMonto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMontoKeyTyped(evt);
            }
        });

        btnAceptar.setBackground(new java.awt.Color(100, 156, 104));
        btnAceptar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAceptar.setForeground(new java.awt.Color(255, 255, 255));
        btnAceptar.setText("Aceptar");
        btnAceptar.setBorder(null);
        btnAceptar.setBorderPainted(false);
        btnAceptar.setFocusPainted(false);
        btnAceptar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAceptarMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnAceptarMouseReleased(evt);
            }
        });
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(100, 156, 104));
        btnCancelar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setBorder(null);
        btnCancelar.setBorderPainted(false);
        btnCancelar.setFocusPainted(false);
        btnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnCancelarMousePressed(evt);
            }
        });
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(236, 196, 100));
        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Depósitos");
        jLabel1.setOpaque(true);

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMonto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCuenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 50, Short.MAX_VALUE)
                        .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSeparator1)
                        .addComponent(txtMonto, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                        .addComponent(jSeparator2)
                        .addComponent(txtCuenta))
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCuenta)
                            .addComponent(txtCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMonto)
                            .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Mensaje de error al consultar cuenta inexistente
     */
    public void mostrarMensajeErrorAlConsultarCuenta() {
        JOptionPane.showMessageDialog(this, "La cuenta no existe",
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Mensaje de error al verificar el estado, si este es "Cancelada" no es
     * posible el depósito
     */
    public void mostrarMensajeErrorAlVerificarEstado() {
        JOptionPane.showMessageDialog(this, "La cuenta esta cancelada",
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Mensaje de error en caso de cualquiera falla al actualizar el saldo.
     */
    public void mostrarMensajeErrorAlActualizarSaldo() {
        JOptionPane.showMessageDialog(this, "No se pudo depositar el saldo",
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Mensaje informativo para cuando se realiza un depósito correctamente.
     */
    public void mostrarMensajeInformacionCorrecta() {
        JOptionPane.showMessageDialog(this, "Se depositó correctamente",
                "Informacion",
                JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Mensaje de error en caso de que alguno de los campos esten vacíos.
     */
    public void mostrarMensajeErrorDatos() {
        JOptionPane.showMessageDialog(this, "Todos los datos deben de estar llenos",
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Método que extrae los datos para el depósito, los válida y asigna, en
     * caso de error llama a sus respectivos mensajes.
     *
     * @throws PersistenciaException Excepción lanzada al tener un error
     */
    public void extraerDatos() throws PersistenciaException {
        if (txtCuenta.getText().isEmpty() || txtMonto.getText().isEmpty()) {
            this.mostrarMensajeErrorDatos();
            throw new PersistenciaException("");
        } else {
            numCuenta = Integer.valueOf(txtCuenta.getText());
            monto = Float.parseFloat(txtMonto.getText());
        }
    }

    /**
     * Método que llama a la interfaz para consultar una cuenta, en caso de
     * error llama a su mensaje.
     *
     * @return Cuenta consultada, nulo en caso de error.
     */
    public Cuenta consultarCuenta() {
        try {
            return this.cuentasDAO.consultarCuenta(numCuenta);
        } catch (PersistenciaException ex) {
            this.mostrarMensajeErrorAlConsultarCuenta();
            return null;
        }
    }

    /**
     * Método que verifica si el estado de la cuenta a depositar es "Activa".
     *
     * @param cuenta Cuenta a verificar
     * @return Boolean dependiendo de la cuenta
     */
    public boolean verificarEstado(Cuenta cuenta) {
        return cuenta.getEstado().equals("Activa");
    }

    /**
     * Método encargado de extraer los datos, consultar cuentas, verificarlas y
     * realizar el depósito, muestra mensaje si fue correcto y regresa al incio,
     * en cualquier caso de error da un mensaje diferente.
     */
    public void actualizarSaldo() {
        try {
            this.extraerDatos();
            Cuenta cuentaConsultada = consultarCuenta();
            if (cuentaConsultada.getCodigoCliente() != null) {
                if (verificarEstado(cuentaConsultada)) {
                    this.cuentasDAO.actualizarSaldo(numCuenta, monto);
                    this.depositosDAO.insertarDeposito(numCuenta, monto);
                    this.mostrarMensajeInformacionCorrecta();
                    new InicioForm(clientesDAO, direccionesDAO, cuentasDAO, retirosDAO, depositosDAO, movimientosDAO).setVisible(true);
                    this.dispose();
                } else {
                    this.mostrarMensajeErrorAlVerificarEstado();
                }
            } else {
                this.mostrarMensajeErrorAlConsultarCuenta();
            }
        } catch (PersistenciaException ex) {
            LOG.log(Level.SEVERE, ex.getMessage());
        }
    }

    /**
     * Método que se acciona al dar click al botón para volver a la ventana
     * principal.
     *
     * @param evt Evento que se crea al dar click al botón
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        new InicioForm(clientesDAO, direccionesDAO, cuentasDAO, retirosDAO, depositosDAO, movimientosDAO).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * Método que se acciona al dar click al botón para actualizar el saldo
     * correspondiente al depósito realizado.
     *
     * @param evt Evento que se crea al dar click al botón
     */
    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        this.actualizarSaldo();
    }//GEN-LAST:event_btnAceptarActionPerformed

    /**
     * Evento que restringe los caracteres para el monto, permitiendo solo
     * numeros, comas y puntos.
     *
     * @param evt Evento que se crea al teclear algo encima
     */
    private void txtMontoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoKeyTyped
        char car = evt.getKeyChar();
        if ((car < '0' || car > '9') && (car < ',' || car > '.'))
            evt.consume();
    }//GEN-LAST:event_txtMontoKeyTyped

    /**
     * Evento que restringe los caracteres para el numero de cuenta, permitiendo
     * solo numeros.
     *
     * @param evt Evento que se crea al teclear algo encima
     */
    private void txtCuentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuentaKeyTyped
        char car = evt.getKeyChar();
        if (car < '0' || car > '9')
            evt.consume();
    }//GEN-LAST:event_txtCuentaKeyTyped

    /**
     * Evento que se acciona cuando se presiona el botón de aceptar para cambiar
     * de color.
     *
     * @param evt Evento que se crea al dar click al botón
     */
    private void btnAceptarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAceptarMousePressed
        this.btnAceptar.setContentAreaFilled(false);
        this.btnAceptar.setOpaque(true);
        this.btnAceptar.setBackground(new Color(148, 116, 69));
    }//GEN-LAST:event_btnAceptarMousePressed

    /**
     * Evento que se acciona cuando se presiona el botón de cancelar para
     * cambiar de color.
     *
     * @param evt Evento que se crea al dar click al botón
     */
    private void btnCancelarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMousePressed
        this.btnCancelar.setContentAreaFilled(false);
        this.btnCancelar.setOpaque(true);
        this.btnCancelar.setBackground(new Color(148, 116, 69));
    }//GEN-LAST:event_btnCancelarMousePressed

    /**
     * Evento que se acciona cuando se suelta el botón para regresar de color.
     *
     * @param evt Evento que se crea al dar click al botón
     */
    private void btnAceptarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAceptarMouseReleased
        this.btnAceptar.setBackground(new Color(100, 156, 104));
    }//GEN-LAST:event_btnAceptarMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblCuenta;
    private javax.swing.JLabel lblMonto;
    private javax.swing.JTextField txtCuenta;
    private javax.swing.JTextField txtMonto;
    // End of variables declaration//GEN-END:variables
}
